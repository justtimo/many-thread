package com.wby.thread.manythread.Character18JAVAIO系统.node2输入和输出;

/**
 * @Auther: LangWeiXian
 * @Date: 2021/7/30 11:47
 * @Description: 编程语言的I/O类库中常使用流这个抽象概念，它代表任何有能力产出数据的数据源对象或者是有能力接收数据的接收端对象。"流"屏蔽了实际的I/O设备中处理数据的细节。
 *
 * Java类库中的I/O类分成输入和输出两部分，可以在JDK文档里的类层次结构中查看到。通过继承，任何自Inputstream或Reader派生而来的类都含有名为readO的基本方法，用于读取单个字节或者字节数组。
 * 同样，任何自OutputStream或Writer派生而来的类都含有名为writeO的基本方法。用干写单个字节或者字节数组。但是，我们通常不会用到这些方法，它们之所以存在是因为别的类可以使用它们。
 * 以便提供更有用的接口。因此。我们很少使用单一的类来创建流对象，而是通过叠合多个对象来提供所期望的功能（这是装饰器设计模式，你将在本节中看到它）。实际上，Java中"流"类库让人迷惑的主要原因就在干;创建单—的结果流，却需要创建多个对象。
 *
 * 有必要按照这些类的功能对它们进行分类。在Java 1.0中，类库的设计者首先限定与输入有关的所有类都应该从InputStream继承，而与输出有关的所有类都应该从OutputStream继承。
 *
 * 正如在本书中所实践的，我将尝试着提供这些类的总揽，但是我必须假设你确实将会使用 JDK文档来确定所有的细节，例如某个特定类的详尽的方法列表。
 */
public class Text {
}
