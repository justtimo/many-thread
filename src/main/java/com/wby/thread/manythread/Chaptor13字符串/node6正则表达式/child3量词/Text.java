package com.wby.thread.manythread.Chaptor13字符串.node6正则表达式.child3量词;

/**
 * @Auther: LangWeiXian
 * @Date: 2021/7/3 16:35
 * @Description:    量词描述了一个模式吸收输入文本的方式：
 *  贪婪型：量词总是贪婪的，除非有其他的选项设置。贪婪表达式会为所有可能的模式发现尽可能多的匹配。导致此问题的一个典型理由就是假定我们的模式仅能匹配第一个可能的字符组，如果他是贪婪的，就继续向下匹配
 *  勉强型：用问号里指定，这个量词匹配满足模式所需的最少字符数。因此也称作懒惰的、最少匹配的、非贪婪的、或不贪婪的
 *  占有型：目前这种类型的量词只有java中可用，并且更高级。
 *      当正则表达式被应用于字符串时，他会产生更多状态，以便匹配失败时进行回溯。
 *      而占有型量词并不保存这些状态，因此他们可以防止回溯。他们常常用来防止正则表达式失控，因此可以使正则表达式执行起来更有效。
 *
 *  贪婪型             勉强型                 占有型                     如何匹配
 *  X？                  X？？                 X？+                     一个或零个X
 *  X*                  X*?                 X*+                         零个或多个X
 *  X+                  X+？                 X++                         一个或多个X
 *  X{n}                X{n}？               X{n}+                       恰好n次X
 *  X{n,}               X{n,}?              X{n,}+                      至少n次X
 *  X{n，m}              X{n，m}？             X{n，m}+                 X至少n次，且不超过m次
 *
 *  应该意识到，X表达式应该使用括号，以便按照期望去执行。例如：
 *  abc+
 *  看起来他似乎应该匹配一个或多个abc序列，然而，这个表达式实际表示的是：匹配ab，后面跟随一个或多个C。
 *  要表示匹配1个或多个完整的abc字符串，我们必须这样表示：
 *  (abc)+
 *
 *
 *  CharSequence
 *  接口CharSequence从CharBuffer、String、StringBuffer、StringBuilder类之中抽象出了字符序列的一般化定义：
 *      charAt
 *      length
 *      subSequence
 *      toString
 *  因此，这些类都实现了该接口。多数正则表达式可以接受CharSequence类型的参数。
 */

public class Text {
}
